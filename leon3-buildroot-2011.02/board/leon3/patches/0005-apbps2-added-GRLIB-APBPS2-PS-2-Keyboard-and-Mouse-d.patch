From 77dcb9d8376d2e2a5b5e989f89ef0de031bc0058 Mon Sep 17 00:00:00 2001
From: Daniel Hellstrom <daniel@gaisler.com>
Date: Fri, 15 Apr 2011 20:56:44 +0200
Subject: [PATCH 5/9] apbps2: added GRLIB APBPS2 PS/2 Keyboard and Mouse driver

APBPS2 is a PS/2 core part of GRLIB found in SPARC32/LEON
products.

Signed-off-by: Daniel Hellstrom <daniel@gaisler.com>
---
 drivers/input/keyboard/atkbd.c |    6 +
 drivers/input/serio/Kconfig    |   21 +++
 drivers/input/serio/Makefile   |    1 +
 drivers/input/serio/apbps2.c   |  272 ++++++++++++++++++++++++++++++++++++++++
 include/linux/serio.h          |    1 +
 5 files changed, 301 insertions(+), 0 deletions(-)
 create mode 100644 drivers/input/serio/apbps2.c

diff --git a/drivers/input/keyboard/atkbd.c b/drivers/input/keyboard/atkbd.c
index 11478eb..1cdb3ca 100644
--- a/drivers/input/keyboard/atkbd.c
+++ b/drivers/input/keyboard/atkbd.c
@@ -1250,6 +1250,12 @@ static struct serio_device_id atkbd_serio_ids[] = {
 		.id	= SERIO_ANY,
 		.extra	= SERIO_ANY,
 	},
+	{
+		.type	= SERIO_APBPS2,
+		.proto	= SERIO_ANY,
+		.id	= SERIO_ANY,
+		.extra	= SERIO_ANY,
+	},
 	{ 0 }
 };
 
diff --git a/drivers/input/serio/Kconfig b/drivers/input/serio/Kconfig
index 55f2c22..87965f2 100644
--- a/drivers/input/serio/Kconfig
+++ b/drivers/input/serio/Kconfig
@@ -103,6 +103,27 @@ config SERIO_AMBAKMI
 	tristate "AMBA KMI keyboard controller"
 	depends on ARM_AMBA
 
+config SERIO_APBPS2
+	tristate "GRLIB APBPS2 PS/2 keyboard/mouse controller"
+	depends on SPARC_LEON && SERIO
+
+config SERIO_APBPS2_KEYB_IRQ
+	hex "Default keyboard IRQ number"
+	default 5
+	depends on SERIO_APBPS2
+	---help---
+	  Select IRQ number of the PS/2 controller that is connected to a
+	  keyboard.
+
+	  Default is IRQ number 5.
+
+	  Controllers that have a irq number not matching the keyboard IRQ
+	  number is treated as Mouse PS/2 controllers.
+
+	  Note: The IRQ number can also be overridden by module parameter:
+	        kbd_irq=irqno  (or kernel argument: apbps2.kbd_irq=irqno)
+	        irqno = 1..31
+
 config SERIO_SA1111
 	tristate "Intel SA1111 keyboard controller"
 	depends on SA1111
diff --git a/drivers/input/serio/Makefile b/drivers/input/serio/Makefile
index dbbe376..1860080 100644
--- a/drivers/input/serio/Makefile
+++ b/drivers/input/serio/Makefile
@@ -25,3 +25,4 @@ obj-$(CONFIG_SERIO_RAW)		+= serio_raw.o
 obj-$(CONFIG_SERIO_AMS_DELTA)	+= ams_delta_serio.o
 obj-$(CONFIG_SERIO_XILINX_XPS_PS2)	+= xilinx_ps2.o
 obj-$(CONFIG_SERIO_ALTERA_PS2)	+= altera_ps2.o
+obj-$(CONFIG_SERIO_APBPS2)	+= apbps2.o
diff --git a/drivers/input/serio/apbps2.c b/drivers/input/serio/apbps2.c
new file mode 100644
index 0000000..932eda7
--- /dev/null
+++ b/drivers/input/serio/apbps2.c
@@ -0,0 +1,272 @@
+/*
+ *  linux/drivers/input/serio/apbps2.c
+ *
+ *  Copyright (C) 2000-2003 Deep Blue Solutions Ltd.
+ *  Copyright (C) 2002 Russell King.
+ *  Copyright (C) 2011 Aeroflex Gaisler, daniel@gaisler.com
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+#include <linux/platform_device.h>
+#include <linux/of_device.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/serio.h>
+#include <linux/errno.h>
+#include <linux/interrupt.h>
+#include <linux/device.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/string.h>
+#include <linux/kernel.h>
+
+#include <asm/io.h>
+#include <asm/irq.h>
+#include <asm/leon.h>  
+
+static int kbd_irq = CONFIG_SERIO_APBPS2_KEYB_IRQ;
+module_param(kbd_irq, int, 0);
+MODULE_PARM_DESC(kbd_irq, "Selects which PS/2 core is keyboard by IRQ number");
+
+struct apbps2_regs {
+	volatile unsigned int data;
+	volatile unsigned int status;
+	volatile unsigned int ctrl;
+	volatile unsigned int reload;
+};
+
+#define APBPS2_STATUS_DR	(1<<0)
+#define APBPS2_STATUS_PE	(1<<1)
+#define APBPS2_STATUS_FE	(1<<2)
+#define APBPS2_STATUS_KI	(1<<3)
+#define APBPS2_STATUS_RF	(1<<4)
+#define APBPS2_STATUS_TF	(1<<5)
+#define APBPS2_STATUS_TCNT	(0x1f<<22)
+#define APBPS2_STATUS_RCNT	(0x1f<<27)
+
+#define APBPS2_CTRL_RE		(1<<0)
+#define APBPS2_CTRL_TE		(1<<1)
+#define APBPS2_CTRL_RI		(1<<2)
+#define APBPS2_CTRL_TI		(1<<3)
+
+struct apbps2_priv {
+	struct serio		io;
+	struct apbps2_regs	*regs;
+	unsigned int		irq;
+	unsigned int		freq_hz;
+};
+
+static irqreturn_t apbps2_isr(int irq, void *dev_id)
+{
+	struct apbps2_priv *priv = dev_id;
+	unsigned long status, data, rxflags;
+	irqreturn_t ret = IRQ_NONE;
+
+	while ((status=priv->regs->status) & APBPS2_STATUS_DR) {
+		data = priv->regs->data;
+		rxflags = (status & APBPS2_STATUS_PE) ? SERIO_PARITY : 0;
+		rxflags |= (status & APBPS2_STATUS_PE) ? SERIO_FRAME : 0;
+
+		if (rxflags)
+			priv->regs->status = status; /* clear error bits */
+
+		serio_interrupt(&priv->io, data, rxflags);
+
+		ret = IRQ_HANDLED;
+	}
+
+	return ret;
+}
+
+static int apbps2_write(struct serio *io, unsigned char val)
+{
+	struct apbps2_priv *priv = io->port_data;
+	unsigned int timeleft = 10000; /* timeout in 100ms */
+
+	/* delay until PS/2 controller has room for more chars */
+	while ((priv->regs->status & APBPS2_STATUS_TF) && timeleft--)
+		udelay(10);
+
+	if ((priv->regs->status & APBPS2_STATUS_TF) == 0) {
+		priv->regs->data = val;
+		priv->regs->ctrl = APBPS2_CTRL_RE | APBPS2_CTRL_RI |
+								APBPS2_CTRL_TE;
+		return 0;
+	}
+
+	return SERIO_TIMEOUT;
+}
+
+static int apbps2_open(struct serio *io)
+{
+	struct apbps2_priv *priv = io->port_data;
+ 	int ret;
+	unsigned long tmp;
+
+	ret = request_irq(priv->irq, apbps2_isr, IRQF_SHARED, "APBPS2", priv);
+	if (ret) {
+		printk(KERN_ERR "APBPS2: request IRQ%d failed\n", priv->irq);
+		return ret;
+	}
+
+	/* clear error flags */
+	priv->regs->status = 0;
+
+	/* Clear old data if available (unlikely) */
+	while (priv->regs->status & APBPS2_STATUS_DR)
+		tmp = priv->regs->data;
+
+	/* Enable reciever and it's interrupt */
+	priv->regs->ctrl = APBPS2_CTRL_RE | APBPS2_CTRL_RI;
+
+	return 0;
+}
+
+static void apbps2_close(struct serio *io)
+{
+	struct apbps2_priv *priv = io->port_data;
+
+	/* stop interrupts at PS/2 HW level */
+	priv->regs->ctrl = 0;
+
+	/* unregister PS/2 interrupt handler */
+	free_irq(priv->irq, priv);
+}
+
+/* Initialize one APBPS2 PS/2 core */
+static int __devinit apbps2_of_probe(struct platform_device *ofdev)
+{
+	struct apbps2_priv *priv;
+	int err, len;
+	const unsigned int *addr;
+	char *typestr;
+
+	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
+	if (priv == NULL)
+		return -ENOMEM;
+	memset(priv, 0, sizeof(*priv));
+	platform_set_drvdata(ofdev, priv);
+
+	/* Find Device Address */
+	priv->regs = of_ioremap(&ofdev->resource[0], 0,
+			  resource_size(&ofdev->resource[0]),
+			  "grlib-apbps2 regs");
+	if (priv->regs == NULL) {
+		printk(KERN_ERR "APBPS2: ioremap failed\n");
+		err = -EIO;
+		goto error1;
+	}
+
+	/* IRQ */
+	priv->irq = ofdev->archdata.irqs[0];
+
+	/* Get core frequency */
+	addr = of_get_property(ofdev->dev.of_node, "freq", &len);
+	if (!addr) {
+		printk(KERN_ERR "APBPS2: unable to get frequency of core\n");
+		err = -EINVAL;
+		goto error2;
+	}
+	priv->freq_hz = *addr;
+
+	priv->io.open	= apbps2_open;
+	priv->io.close	= apbps2_close;
+	priv->io.port_data = priv;
+
+	/* Get Physical IRQ number */
+	addr = of_get_property(ofdev->dev.of_node, "interrupts", &len);
+	if (!addr) {
+		printk(KERN_ERR "APBPS2: unable to get real IRQ number\n");
+		err = -EINVAL;
+		goto error2;
+	}
+
+	if (*addr == kbd_irq) {
+		priv->io.id.type = SERIO_APBPS2;
+		priv->io.write = apbps2_write;
+		strlcpy(priv->io.name, "APBPS2 PS/2 Keyboard",
+						sizeof(priv->io.name));
+		strlcpy(priv->io.phys, "APBPS2 PS/2 Keyboard",
+						sizeof(priv->io.phys));
+		typestr = "Keyboard";
+	} else {
+		priv->io.id.type = SERIO_PS_PSTHRU;
+		priv->io.write = apbps2_write;
+		strlcpy(priv->io.name, "APBPS2 PS/2 Mouse",
+						sizeof(priv->io.name));
+		strlcpy(priv->io.phys, "APBPS2 PS/2 Mouse",
+						sizeof(priv->io.phys)); 
+		typestr = "Mouse";
+	}
+
+	printk(KERN_INFO "APBPS2: %s @ %p, irq: %d @ %dKHz\n",
+			typestr, priv->regs, priv->irq, priv->freq_hz / 1000);
+
+	/* Set reload register to system freq in kHz/10 */
+	priv->regs->reload = priv->freq_hz / 10000;
+
+	serio_register_port(&priv->io);
+
+	return 0;
+
+error2:
+	of_iounmap(&ofdev->resource[0], priv->regs,
+					resource_size(&ofdev->resource[0]));
+error1:
+	kfree(priv);
+	return err;
+}
+
+static int __devexit apbps2_of_remove(struct platform_device *of_dev)
+{
+	struct apbps2_priv *priv = dev_get_drvdata(&of_dev->dev);
+
+	of_iounmap(&of_dev->resource[0], priv->regs,
+					resource_size(&of_dev->resource[0]));
+	kfree(priv);
+
+	return 0;
+}
+
+static struct of_device_id apbps2_of_match[] = {
+	{
+	 .name = "GAISLER_APBPS2",
+	 },
+	{
+	 .name = "01_060",
+	 },
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, apbps2_of_match);
+
+static struct platform_driver apbps2_of_driver = {
+	.driver = {
+		.name = "grlib-apbps2",
+		.owner = THIS_MODULE,
+		.of_match_table = apbps2_of_match,
+	},
+	.probe = apbps2_of_probe,
+	.remove = __devexit_p(apbps2_of_remove),
+};
+
+static int __init apbps2_init(void)
+{
+	return platform_driver_register(&apbps2_of_driver);
+}
+
+static void __exit apbps2_cleanup(void)
+{
+	platform_driver_unregister(&apbps2_of_driver);
+}
+
+module_init(apbps2_init);
+module_exit(apbps2_cleanup);
+
+MODULE_AUTHOR("Aeroflex Gaisler AB.");
+MODULE_DESCRIPTION("GRLIB APBPS2 PS/2 serial I/O");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/serio.h b/include/linux/serio.h
index e26f478..1c644c4 100644
--- a/include/linux/serio.h
+++ b/include/linux/serio.h
@@ -154,6 +154,7 @@ static inline void serio_continue_rx(struct serio *serio)
 #define SERIO_HIL_MLC	0x03
 #define SERIO_PS_PSTHRU	0x05
 #define SERIO_8042_XL	0x06
+#define SERIO_APBPS2	0x07
 
 /*
  * Serio protocols
-- 
1.5.4

